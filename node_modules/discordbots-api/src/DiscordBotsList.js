const snek = require('snekfetch');

class DiscordBotsList {
    constructor(token) {
        this.token = token;
        if (typeof token != 'string') throw new SyntaxError('Discord Bots List token must be a string.');
    }

    /**
     * Post stats (No shards)
     * @param {Number} servers - Server Count
     * @param {Number} id - ID.
     */
    postStats(servers, id) {
        snek.post(`https://discordbots.org/api/bots/${id}/stats`)
            .set('Authorization', this.token)
            .send({
                server_count: servers
            })
            .catch((err) => new Error('Error has concluded.\n' + err));
    }

    /**
     * Get some information about a bot.
     * @param {Number} id - ID of the bot.
     */
    getBot(id) {
        return new Promise((reject, resolve) => {
            snek.get(`https://discordbots.org/api/bots/${id}`)
                .then((res) => resolve(res))
                .catch(err => reject(err));
        });
    }

    /**
     * Post stats with Shards.
     * @param {Number} shardID - Shard ID!
     * @param {Number} shardCount - Shard Count!
     * @param {Number} servers - Server Count
     * @param {Number} id - id.
     */
    postStatsWithShards(shardID, shardCount, servers, id) {
       return new Promise((reject, resolve) => {
          snek.post(`https://discordbots.org/api/bots/${id}/stats`)
              .set('Authorization', this.token)
              .send({
                  shard_id: shardID,
                  shard_count: shardCount,
                  server_count: servers
              })
              .then(() => resolve())
              .catch((e) => reject(e));
       });
    }
}

module.exports = DiscordBotsList;